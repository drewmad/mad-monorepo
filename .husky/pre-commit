#!/usr/bin/env sh

# Run lint-staged for code formatting
npx lint-staged

# Check for common import issues
echo "üîç Checking imports..."

# Check for subpath imports (quick check on staged files only)
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx)$' || true)

if [ -n "$STAGED_FILES" ]; then
  IMPORT_ERRORS=0
  
  for file in $STAGED_FILES; do
    # Check for @ui subpath imports
    if grep -E "from ['\"]@ui/" "$file" 2>/dev/null; then
      echo "‚ùå Error: Found @ui subpath import in $file"
      echo "   Change to: import { Component } from '@ui';"
      IMPORT_ERRORS=$((IMPORT_ERRORS + 1))
    fi
    
    # Check for @db subpath imports (excluding types)
    if grep -E "from ['\"]@db/" "$file" 2>/dev/null | grep -v "from ['\"]@db/types"; then
      echo "‚ùå Error: Found @db subpath import in $file"
      echo "   Change to: import { function } from '@db';"
      IMPORT_ERRORS=$((IMPORT_ERRORS + 1))
    fi
    
    # Check for dist imports
    if grep -E "from ['\"]@[^'\"]*\/dist\/" "$file" 2>/dev/null; then
      echo "‚ùå Error: Found dist folder import in $file"
      echo "   Import from package root instead"
      IMPORT_ERRORS=$((IMPORT_ERRORS + 1))
    fi
  done
  
  if [ $IMPORT_ERRORS -gt 0 ]; then
    echo ""
    echo "üí° To fix automatically, run:"
    echo "   sed -i '' \"s/from '@ui\\/[^']*'/from '@ui'/g\" $STAGED_FILES"
    echo "   sed -i '' \"s/from '@db\\/[^']*'/from '@db'/g\" $STAGED_FILES"
    exit 1
  fi
fi

# Check if package.json changed but pnpm-lock.yaml didn't
if git diff --cached --name-only | grep -E "package\.json$" > /dev/null; then
  if ! git diff --cached --name-only | grep "pnpm-lock.yaml" > /dev/null; then
    echo "‚ö†Ô∏è  package.json changed but pnpm-lock.yaml wasn't updated"
    echo "Run 'pnpm install' to update the lockfile"
    exit 1
  fi
fi

# Check if pnpm-lock.yaml exists
if [ ! -f "pnpm-lock.yaml" ]; then
  echo "‚ùå pnpm-lock.yaml is missing!"
  echo "Run 'pnpm install' to generate it"
  exit 1
fi

# Run quick validation on staged files
if [ -n "$STAGED_FILES" ]; then
  echo "üîç Running TypeScript check on staged files..."
  # Use proper project-based type checking instead of individual files
  pnpm typecheck || {
    echo "‚ùå TypeScript errors found in staged files"
    exit 1
  }
fi

echo "‚úÖ Pre-commit checks passed"